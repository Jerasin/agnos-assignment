// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	repository "agnos-assignment/app/repository"

	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// BaseRepositoryInterface is an autogenerated mock type for the BaseRepositoryInterface type
type BaseRepositoryInterface struct {
	mock.Mock
}

// ClientDb provides a mock function with no fields
func (_m *BaseRepositoryInterface) ClientDb() *gorm.DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ClientDb")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// Count provides a mock function with given fields: model, conditions
func (_m *BaseRepositoryInterface) Count(model interface{}, conditions *map[string]interface{}) (int64, error) {
	ret := _m.Called(model, conditions)

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, *map[string]interface{}) (int64, error)); ok {
		return rf(model, conditions)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *map[string]interface{}) int64); ok {
		r0 = rf(model, conditions)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(interface{}, *map[string]interface{}) error); ok {
		r1 = rf(model, conditions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: tx, model, body
func (_m *BaseRepositoryInterface) Delete(tx *gorm.DB, model interface{}, body interface{}) error {
	ret := _m.Called(tx, model, body)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, interface{}, interface{}) error); ok {
		r0 = rf(tx, model, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindOne provides a mock function with given fields: tx, model, query, args
func (_m *BaseRepositoryInterface) FindOne(tx *gorm.DB, model interface{}, query interface{}, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, tx, model, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindOne")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, interface{}, interface{}, ...interface{}) error); ok {
		r0 = rf(tx, model, query, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Pagination provides a mock function with given fields: p, query, args
func (_m *BaseRepositoryInterface) Pagination(p repository.PaginationModel, query interface{}, args ...interface{}) (interface{}, error) {
	var _ca []interface{}
	_ca = append(_ca, p, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Pagination")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(repository.PaginationModel, interface{}, ...interface{}) (interface{}, error)); ok {
		return rf(p, query, args...)
	}
	if rf, ok := ret.Get(0).(func(repository.PaginationModel, interface{}, ...interface{}) interface{}); ok {
		r0 = rf(p, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(repository.PaginationModel, interface{}, ...interface{}) error); ok {
		r1 = rf(p, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: tx, model
func (_m *BaseRepositoryInterface) Save(tx *gorm.DB, model interface{}) error {
	ret := _m.Called(tx, model)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, interface{}) error); ok {
		r0 = rf(tx, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TotalPage provides a mock function with given fields: model, pageSize
func (_m *BaseRepositoryInterface) TotalPage(model interface{}, pageSize int) (int64, error) {
	ret := _m.Called(model, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for TotalPage")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, int) (int64, error)); ok {
		return rf(model, pageSize)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int) int64); ok {
		r0 = rf(model, pageSize)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(interface{}, int) error); ok {
		r1 = rf(model, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Updates provides a mock function with given fields: tx, model, values
func (_m *BaseRepositoryInterface) Updates(tx *gorm.DB, model interface{}, values interface{}) error {
	ret := _m.Called(tx, model, values)

	if len(ret) == 0 {
		panic("no return value specified for Updates")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, interface{}, interface{}) error); ok {
		r0 = rf(tx, model, values)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBaseRepositoryInterface creates a new instance of BaseRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBaseRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *BaseRepositoryInterface {
	mock := &BaseRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
